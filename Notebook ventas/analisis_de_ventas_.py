# -*- coding: utf-8 -*-
"""Analisis de ventas .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18jZtTNmefx64hYiGtxG4xJ2qy23ZiVvN

Tomamos el conjunto de datos de Kaggle https://www.kaggle.com/datasets/datacertlaboratoria/proyecto-3-segmentacin-de-clientes-en-ecommerce
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import pandas as pd
df= pd.read_csv('/content/ventas-por-factura.csv')

print(df.isnull())
#Contemos los nulos por columna
print(df.isnull().sum())

"""Hay 3724 nulos en la columna 'ID cliente'.
Veamos el tamaño del conjunto de datos, para ver si es que faltas todos los datos de esa columna o son algunos nomas.
"""

print(df.shape)

"""Podemos observar que faltan 3724 datos de esa columna (el total son 25953)

Por ahi para no perder esos datos unicos del cliente (ID) lo que podemos hacer es hacer el renombramiento de toda la columna para que queden completos o la otra opcion es eliminar esa columna. Esta ultima opcion puede ser valida cuando no nos interesa esa columna, pero para mi que tengamos algo que identifique al cliente nos va a servir para el analisis. El problema que se nos puede aparecer es que el cliente compre dos dias diferentes y por lo tanto no podriamos completar la columna con el ID autoincrementado.
"""

print(df.head(25))

"""Ahora ya en los codigos anteriores podemos ver que hay valores ilogicos para la columna 'Cantidad' ya que no pueden ser -1. Vamos a tratar esa columna."""

# Filtrar facturas que empiezan con 'C'
df['Es_anulada'] = df['N° de factura'].astype(str).str.startswith('C')
df[df['Cantidad'] < 0]['Es_anulada'].value_counts()

"""Esto indica que hay 3841 registros cuya factura empieza con "C", o sea, son anulaciones o cancelaciones. Y 1338 registros con cantidad negativa no están marcados como anulados.


"""

# Filtramos facturas que no son anuladas
df_ventas = df[~df['N° de factura'].astype(str).str.startswith('C')]

# Además, eliminamos registros con cantidad negativa
df_ventas = df_ventas[df_ventas['Cantidad'] > 0]

print(df_ventas)

# Transacciones anuladas
df_anuladas = df[df['N° de factura'].astype(str).str.startswith('C')]

# Registros con cantidad negativa pero sin estar marcados como anulados
df_dudosos = df[(df['Cantidad'] < 0) & (~df['N° de factura'].astype(str).str.startswith('C'))]

"""1)Para análisis de facturación real: usamos df_ventas

2)Para detectar problemas o inconsistencias: analizaremos df_dudosos

3)Para analizar devoluciones y su impacto: usamos df_anuladas

¿Hay filas exactamente iguales? Especialmente en facturas o transacciones, esto puede inflar montos.
"""

df_ventas.duplicated().sum()  # Total de filas duplicadas
print(df_ventas.duplicated().sum())
df_ventas = df_ventas.drop_duplicates()  # Eliminar duplicados si no tienen sentido

"""¿Fecha de factura está en formato datetime?

¿Monto es float? ¿Tiene símbolos extraños?
"""

df_ventas['Fecha de factura'] = pd.to_datetime(df_ventas['Fecha de factura'])
df_ventas['Monto'] = pd.to_numeric(df_ventas['Monto'], errors='coerce')

"""Valores fuera de rango
Aunque sean numéricamente válidos, pueden ser absurdos.

¿Montos de facturas extremadamente altos o 0?

¿Fechas en el futuro? ¿Antes del año 2000?

¿Cantidad igual a 0? (¿vale la pena guardar esas filas?)
"""

df_ventas[df_ventas['Monto'] <= 0]
df_ventas[df_ventas['Fecha de factura'] > pd.Timestamp.today()]

"""Mes de la factura → para agrupar por tiempo"""

print(df_ventas.head(25))

"""Podemos ver que en la columna 'Monto' nos quedo NaN por lo tanto fue un error nuestro. Vamos a arreglarlo.

Veamos que habia al principio en esa columna.
"""

df_ventas['Monto'].sample(10)  # Para ver ejemplos

"""Recuperemos esos valores.
Vamos a reimportar el df original y vamos a recuperar los valores de 'Monto'
"""

df = pd.read_csv("/content/ventas-por-factura.csv")
# Y filtrás ventas otra vez
df_ventas = df[~df['N° de factura'].astype(str).str.startswith('C')]
df_ventas = df_ventas[df_ventas['Cantidad'] > 0]
df_ventas = df_ventas.dropna(subset=['ID Cliente'])
print(df_ventas.head(50))

df_ventas.dtypes

df_ventas['Fecha de factura'] = pd.to_datetime(df['Fecha de factura'])

df_ventas['Mes'] = df_ventas['Fecha de factura'].dt.to_period('M')

"""Vamos a responder lo siguiente:

¿Cuánto es lo que venden en promedio al mes?

¿cuántas ventas tienen en cada mes?

¿cuál es el mes que más venden?

¿quiénes son sus clientes más importantes?

¿cuál es el monto promedio que gastan sus clientes?

¿qué porcentaje de sus clientes han vuelto a comprarles?

¿cómo se desglosa esta información según los países en donde venden?
"""

df_ventas['Monto'] = df_ventas['Monto'].astype(str)
df_ventas['Monto'] = df_ventas['Monto'].str.replace('£', '', regex=False)
df_ventas['Monto'] = df_ventas['Monto'].str.replace(',', '.', regex=False)  # Si hay comas decimales
df_ventas['Monto'] = df_ventas['Monto'].str.replace(' ', '', regex=False)   # Si hay espacios

# Ahora convertí
df_ventas['Monto'] = pd.to_numeric(df_ventas['Monto'], errors='coerce')
print(df_ventas.head(25))

df_ventas.dtypes

df_ventas['Mes'] = df_ventas['Fecha de factura'].dt.to_period('M').astype(str)

print(df_ventas.head())

"""Veamos el promedio mensual"""

promedio_mensual = df_ventas.groupby('Mes')['Monto'].mean().reset_index()

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.plot(promedio_mensual['Mes'], promedio_mensual['Monto'], marker='o')
plt.xticks(rotation=45)
plt.title('Promedio de ventas por mes')
plt.xlabel('Mes')
plt.ylabel('Monto promedio (£)')
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""Calculemos el promedio mensual de ventas"""

promedio_mensual_cantidad_ventas = df_ventas.groupby('Mes')['Cantidad'].mean().reset_index()

"""Grafiquemos el promedio mensual"""

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.plot(promedio_mensual_cantidad_ventas['Mes'], promedio_mensual_cantidad_ventas['Cantidad'], marker='o')
plt.xticks(rotation=45)
plt.title('Promedio de ventas por mes')
plt.xlabel('Mes')
plt.ylabel('Cantidad promedio')
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""Busquemos el promedio mensual no es el de CADA mes.



"""

total_mensual = df_ventas.groupby('Mes')['Monto'].sum()
promedio_total_mensual = total_mensual.mean()
print(f"Promedio de ventas al mes: £{promedio_total_mensual:.2f}")

"""Hagamos lo mismo para ver la cantidad promedio que se vende por mes."""

total_mensual_cantidad=df_ventas.groupby('Mes')['Cantidad'].sum()
promedio_total_mensual_cantidad=total_mensual_cantidad.mean()
print(f"Promedio de  cantidad de ventas al mes: {promedio_total_mensual_cantidad:.2f}")

"""Por lo tanto para dar respuesta a la primer pregunta:
El promedio de monto de ventas por mes es : £818,948.65 y el promedio de cantidad de ventas es 435,510.92
"""

# Agrupar por mes y sumar monto
monto_por_mes = df_ventas.groupby('Mes')['Monto'].sum().reset_index()
print(monto_por_mes)

"""La cantidad de ventas en terminos de monto son:

2020-12    823,746.14

2021-01    691,364.56

2021-02    523,631.89

2021-03    717,639.36

2021-04    537,808.62

2021-05    770,536.02

2021-06    761,739.90

2021-07    719,221.19

2021-08    737,014.26

2021-09   1,060,362.19

2021-10   1,154,979.30

2021-11   1,509,496.33

2021-12    638,792.68
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.bar(monto_por_mes['Mes'], monto_por_mes['Monto'])
plt.xticks(rotation=45)
plt.title('Monto total por mes')
plt.xlabel('Mes')
plt.ylabel('Monto (£)')
plt.tight_layout()
plt.show()

"""El mes en el que mas ventas se registran en terminos de monto es el mes de noviembre de 2021 con £1,509,496.33"""

# Agrupar por mes y sumar cantidad
cantidad_por_mes = df_ventas.groupby('Mes')['Cantidad'].sum().reset_index()
print(cantidad_por_mes)

"""Ahora en veamos la cantidad de ventas por mes:

    Mes  Cantidad

2020-12    362,316

2021-01    397,716

2021-02    286,695

2021-03    384,950

2021-04    312,176

2021-05    399,425

2021-06    394,337

2021-07    407,539

2021-08    425,016

2021-09    576,077

2021-10    628,745

2021-11    771,598

2021-12    315,052
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.bar(cantidad_por_mes['Mes'], cantidad_por_mes['Cantidad'])
plt.xticks(rotation=45)
plt.title('Cantidad de ventas total por mes')
plt.xlabel('Mes')
plt.ylabel('Cantidad de ventas')
plt.tight_layout()
plt.show()

"""El mes en el que mas ventas se registran como se puede esperar a relacion de lo facturado, es el mes de noviembre de 2021 con 771,598 ventas.

Ahora vamos a responder: ¿quiénes son sus clientes más importantes?
"""

cantidad_de_compras_por_id = df_ventas.groupby('ID Cliente').size().reset_index(name='Cantidad de compras')

print(cantidad_de_compras_por_id)

cantidad_de_compras_por_id = cantidad_de_compras_por_id.sort_values('Cantidad de compras', ascending=False)
print('Los 50 clientes mas frecuentes son: ')
print( cantidad_de_compras_por_id.head(50))

"""Ahora veamos: ¿cuál es el monto promedio que gastan sus clientes?"""

monto_por_cliente = df_ventas.groupby('ID Cliente')['Monto'].sum().reset_index()
monto_promedio_cliente = monto_por_cliente['Monto'].mean()
print(f"El monto promedio que gastan los clientes es de £{monto_promedio_cliente:.2f}")

"""¿qué porcentaje de sus clientes han vuelto a comprarles?"""

compras_por_cliente = df_ventas.groupby('ID Cliente').size().reset_index(name='Cantidad de compras')
clientes_recurrentes = compras_por_cliente[compras_por_cliente['Cantidad de compras'] > 1]
porcentaje_recompra = (len(clientes_recurrentes) / compras_por_cliente.shape[0]) * 100
print(f"{porcentaje_recompra:.2f}% de los clientes han vuelto a comprar.")

"""¿cómo se desglosa esta información según los países en donde venden?"""

#Veamos cuantas compras hay por pais
compras_por_pais = df_ventas.groupby('País').size().reset_index(name='Cantidad de compras')
print(compras_por_pais)

#Veamos cuanto gastan por pais
monto_por_pais = df_ventas.groupby('País')['Monto'].sum().reset_index()
monto_por_pais = monto_por_pais.sort_values('Monto', ascending=False)
print(monto_por_pais)

#Veamos cuantos clientes unicos hay por pais
clientes_por_pais = df_ventas.groupby('País')['ID Cliente'].nunique().reset_index(name='Clientes únicos')
clientes_por_pais = clientes_por_pais.sort_values('Clientes únicos', ascending=False)

print(clientes_por_pais)

import matplotlib.pyplot as plt

compras_por_pais = compras_por_pais.sort_values('Cantidad de compras', ascending=False)

plt.figure(figsize=(12, 6))
plt.bar(compras_por_pais['País'], compras_por_pais['Cantidad de compras'])
plt.xticks(rotation=45, ha='right')
plt.title('Cantidad de compras por país')
plt.xlabel('País')
plt.ylabel('Cantidad de compras')
plt.tight_layout()
plt.show()

compras_por_pais = compras_por_pais.sort_values('Cantidad de compras', ascending=False)
print(compras_por_pais.head(5))

"""Calculemos el tiempo que pasa desde la ultima compra hasta la proxima compra de un cliente."""

df_ventas = df_ventas.sort_values(by=['ID Cliente', 'Fecha de factura'])
df_ventas['Dias hasta próxima compra'] = df_ventas.groupby('ID Cliente')['Fecha de factura'].diff().dt.days
recompra_promedio = df_ventas.groupby('ID Cliente')['Dias hasta próxima compra'].mean().reset_index()

import seaborn as sns
import matplotlib.pyplot as plt

sns.histplot(df_ventas['Dias hasta próxima compra'].dropna(), bins=30, kde=True)
plt.title('Distribución de días entre compras')
plt.xlabel('Días')
plt.ylabel('Cantidad de registros')
plt.show()

"""La mayoría de los clientes vuelve a comprar dentro de los primeros 10 días, pero hay una proporción menor que espera 30 a 60 días entre compras. Esto sugiere una base de clientes frecuentes con un grupo más esporádico."""

diferencias_validas = df_ventas['Dias hasta próxima compra'].dropna()
recompras_tempranas = (diferencias_validas <= 7).sum()
total_recompras = diferencias_validas.shape[0]
tasa_recompra_7_dias = (recompras_tempranas / total_recompras) * 100
print(f"Tasa de recompra en 7 días: {tasa_recompra_7_dias:.2f}%")

"""El 28.84% de las veces que un cliente vuelve a comprar, lo hace dentro de los primeros 7 días desde su compra anterior."""

#Veamos el top 10 clientes mas fieles
df_recompras = df_ventas.dropna(subset=['Dias hasta próxima compra'])
recompra_por_cliente = df_recompras.groupby('ID Cliente').agg(
    total_recompras=('Dias hasta próxima compra', 'count'),
    tempranas=('Dias hasta próxima compra', lambda x: (x <= 7).sum())
).reset_index()

recompra_por_cliente['tasa_recompra_7_dias'] = (recompra_por_cliente['tempranas'] / recompra_por_cliente['total_recompras']) * 100

top_fieles = recompra_por_cliente.sort_values('tasa_recompra_7_dias', ascending=False).head(10)
print(top_fieles[['ID Cliente', 'tasa_recompra_7_dias']])

#Veamos cuando compra mas cada pais
df_ventas['Mes'] = df_ventas['Fecha de factura'].dt.to_period('M').astype(str)

compras_por_pais_mes = df_ventas.groupby(['País', 'Mes']).size().reset_index(name='Cantidad de compras')
top_paises = df_ventas['País'].value_counts().head(4).index.tolist()

import matplotlib.pyplot as plt
import seaborn as sns

fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(15, 8), sharex=True, sharey=True)
axs = axs.flatten()

for i, pais in enumerate(top_paises):
    data_pais = compras_por_pais_mes[compras_por_pais_mes['País'] == pais]
    sns.lineplot(x='Mes', y='Cantidad de compras', data=data_pais, marker='o', ax=axs[i])
    axs[i].set_title(f'Compras mensuales en {pais}')
    axs[i].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()

tabla = compras_por_pais_mes.pivot(index='País', columns='Mes', values='Cantidad de compras').fillna(0)

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(16, 10))
sns.heatmap(tabla, cmap='YlGnBu', linewidths=0.5, annot=True, fmt=".0f")
plt.title('Compras mensuales por país (heatmap)')
plt.xlabel('Mes')
plt.ylabel('País')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""1. ¿En qué meses cada país tiene su pico de compras?

➡️ Mirá las celdas con los valores más altos en cada fila.
Miramos las celdas con valores mas altos en cada fila, en nuestro caso UK tiene su pico en octubre,noviembre y diciembre de 2021. Alemania los tiene en Octubre y Noviembre. Es asi podriamos seguir sucesivamente.
2. ¿Hay países más estacionales que otros?

➡️ Si un país tiene una celda muy alta y el resto mucho más bajas, es estacional.
En nuestro caso se podria decir que Finlandia es estacional.
"""

# Pivot para tener la tabla país vs mes
tabla = compras_por_pais_mes.pivot(index='País', columns='Mes', values='Cantidad de compras').fillna(0)

import numpy as np
resumen_paises = pd.DataFrame({
    'Promedio mensual': tabla.mean(axis=1),
    'Desvío estándar': tabla.std(axis=1)
})
umbral = 100  # podés ajustarlo si querés
resumen_paises['Consistencia'] = np.where(resumen_paises['Desvío estándar'] <= umbral, 'Consistente', 'Inestable')
resumen_paises = resumen_paises.sort_values('Desvío estándar')
print(resumen_paises.head(10))

"""Como dato de color UK es un  pais inestable en compras.

Analizemos en que momento del dia se vende mas (cantidad)
"""

df_ventas['Hora'] = df_ventas['Fecha de factura'].dt.hour
compras_por_hora = df_ventas.groupby('Hora').size().reset_index(name='Cantidad de compras')

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
sns.barplot(x='Hora', y='Cantidad de compras', data=compras_por_hora, palette='coolwarm')
plt.title('Distribución de compras por hora del día')
plt.xlabel('Hora del día')
plt.ylabel('Cantidad de compras')
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""Hagamos el mismo analisis con monto"""

monto_por_hora= df_ventas.groupby('Hora')['Monto'].mean()
print(monto_por_hora)

"""Se puede observar que si bien se vende mas cantidad a las 12 del mediodia, el monto mayor se da a las 7 hs."""